name: profiling

on:
  push:
  pull_request:
  schedule:
    - cron: '34 17 * * *'

jobs:

  profiling_ubuntu:

    if: ${{ github.event_name != 'schedule' || (github.event_name == 'schedule' && vars.MMGH_NIGHTLY == 'enable') }}

    name: profiliing_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      QT_DEBUG_PLUGINS: 1
      QT_QPA_PLATFORM: offscreen
      # Fix issue: https://github.com/solvcon/modmesh/issues/366
      # Use custom config for jurplel/install-qt-action@v4
      AQT_CONFIG: "thirdparty/aqt_settings.ini"

    strategy:
        matrix:
          os: [ubuntu-22.04]
          cmake_build_type: [Release]

        fail-fast: false

    steps:

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: event name
      run: |
        echo "github.event_name: ${{ github.event_name }}"

    - name: dependency by apt
      run: |
        sudo apt-get -qqy update
        sudo apt-get -qy install \
            sudo curl git build-essential make cmake libc6-dev gcc g++ \
            python3 python3-dev python3-venv
        # Install qt6 only with ubuntu-22.04
        # This page explains why we need libgl1-mesa-dev
        # https://doc-snapshots.qt.io/qt6-dev/linux.html
        #
        # In short, OpenGL libraries and headers are required. Without
        # installing this package, cmake won't find the correct lib path.
        # This has been replaced by the 'install qt' section below to manage
        # qt6 versioning independently from the OS.

        # if [ "${{ matrix.os }}" == "ubuntu-22.04" ] ; then \
        #   sudo apt-get -qy install \
        #       qt6-3d-dev xvfb \
        #       libgl1-mesa-dev
        # fi

    - name: install qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.8.1'
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'
        modules: 'qt3d'
        setup-python: 'false'
        cache: true

    - name: dependency by pip
      run: |
        sudo pip3 install setuptools
        sudo pip3 install numpy matplotlib pytest flake8 jsonschema
        sudo pip3 install pyside6==$(qmake6 -query QT_VERSION)
    
    - name: dependency by manual script
      run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

    - name: show dependency
      # Copy the commands from contrib/dependency/showdep.sh
      run: |
        echo "gcc path: $(which gcc)"
        echo "gcc version: $(gcc --version)"
        echo "cmake path: $(which cmake)"
        echo "cmake version: $(cmake --version)"
        echo "python3 path: $(which python3)"
        echo "python3 version: $(python3 --version)"
        echo "python3-config --prefix: $(python3-config --prefix)"
        echo "python3-config --exec-prefix: $(python3-config --exec-prefix)"
        echo "python3-config --includes: $(python3-config --includes)"
        echo "python3-config --libs: $(python3-config --libs)"
        echo "python3-config --cflags: $(python3-config --cflags)"
        echo "python3-config --ldflags: $(python3-config --ldflags)"
        echo "pip3 path: $(which pip3)"
        python3 -c 'import numpy as np; print("np.__version__:", np.__version__, np.get_include())'
        echo "pytest path: $(which pytest)"
        echo "pytest version: $(pytest --version)"
        echo "clang-tidy path: $(which clang-tidy)"
        echo "clang-tidy version: $(clang-tidy -version)"
        echo "flake8 path: $(which flake8)"
        echo "flake8 version: $(flake8 --version)"

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ matrix.cmake_build_type }}
        restore-keys: ${{ runner.os }}-${{ matrix.cmake_build_type }}
        create-symlink: true

    - name: make buildext MODMESH_PROFILE=ON BUILD_QT=ON USE_PYTEST_HELPER_BINDING=ON
      run: |
        rm -f build/*/Makefile
        make cmake \
          VERBOSE=1 USE_CLANG_TIDY=OFF \
          BUILD_QT=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_PYTEST_HELPER_BINDING=ON -DMODMESH_PROFILE=ON"
        make buildext VERBOSE=1

    - name: make pyprof
      run: |
        make pyprof

  profiling_macos:

    if: ${{ github.event_name != 'schedule' || (github.event_name == 'schedule' && vars.MMGH_NIGHTLY == 'enable') }}

    name: profiliing_${{ matrix.os }}_${{ matrix.cmake_build_type }}

    runs-on: ${{ matrix.os }}

    env:
      QT_DEBUG_PLUGINS: 1
      PIP_BREAK_SYSTEM_PACKAGES: 1 # disabling PEP668
      # Fix issue: https://github.com/solvcon/modmesh/issues/366
      # Use custom config for jurplel/install-qt-action@v4
      AQT_CONFIG: "thirdparty/aqt_settings.ini"

    strategy:
      matrix:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md
        os: [macos-13, macos-14]
        cmake_build_type: [Release]

      fail-fast: false

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: event name
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          # Some mac runner does not have /usr/local/include and cmake sometimes crashes
          sudo mkdir -p /usr/local/include

      - name: dependency by homebrew
        run: |
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          # This has been replaced by the 'install qt' section below to manage
          # qt6 versioning independently from the OS.
          # brew install qt6

      - name: install qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.1'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          modules: 'qt3d'
          setup-python: 'false'
          cache: true

      - name: dependency by pip
        run: |
          echo "which python3: $(which python3)"
          ls -al $(which python3)
          # suppress the warning of pip because brew forces PEP668 since python3.12
          python3 -m pip -v install --upgrade setuptools
          # Sometimes pip upgrade fails with macos-14, turn off temporarily (2025/4/27).
          #python3 -m pip -v install --upgrade pip
          python3 -m pip -v install --upgrade numpy matplotlib pytest flake8 jsonschema
          # For now (2024/10/22), pyside6 6.6.3 does not support Python 3.13.
          # Use --ignore-requires-python to force installation.
          python3 -m pip -v install --upgrade pyside6==$(qmake -query QT_VERSION) --ignore-requires-python

      - name: dependency by manual script
        run: |
          sudo NO_INSTALL_PREFIX=1 ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11
          thirdparty/metal-cpp.sh

      - name: show dependency
        # Copy the commands from contrib/dependency/showdep.sh
        run: |
          echo "gcc path: $(which gcc)"
          echo "gcc version: $(gcc --version)"
          echo "cmake path: $(which cmake)"
          echo "cmake version: $(cmake --version)"
          echo "python3 path: $(which python3)"
          echo "python3 version: $(python3 --version)"
          echo "python3-config --prefix: $(python3-config --prefix)"
          echo "python3-config --exec-prefix: $(python3-config --exec-prefix)"
          echo "python3-config --includes: $(python3-config --includes)"
          echo "python3-config --libs: $(python3-config --libs)"
          echo "python3-config --cflags: $(python3-config --cflags)"
          echo "python3-config --ldflags: $(python3-config --ldflags)"
          echo "pip3 path: $(which pip3)"
          python3 -c 'import numpy as np; print("np.__version__:", np.__version__, np.get_include())'
          echo "pytest path: $(which pytest)"
          echo "pytest version: $(pytest --version)"
          echo "clang-tidy path: $(which clang-tidy)"
          echo "clang-tidy version: $(clang-tidy -version)"
          echo "flake8 path: $(which flake8)"
          echo "flake8 version: $(flake8 --version)"

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ matrix.cmake_build_type }}
          restore-keys: ${{ runner.os }}-${{ matrix.cmake_build_type }}
          create-symlink: true

      - name: make buildext MODMESH_PROFILE=ON BUILD_QT=ON USE_PYTEST_HELPER_BINDING=ON
        run: |
          rm -f build/*/Makefile
          make cmake \
            VERBOSE=1 USE_CLANG_TIDY=OFF \
            BUILD_QT=ON \
            CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3) -DUSE_PYTEST_HELPER_BINDING=ON -DMODMESH_PROFILE=ON"
          make buildext VERBOSE=1

      - name: make pyprof
        run: |
          make pyprof